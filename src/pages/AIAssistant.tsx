
import { useState } from "react";
import { Layout } from "@/components/layout/Layout";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Check, Copy, Send, User } from "lucide-react";
import { cn } from "@/lib/utils";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: string;
}

const templates = [
  {
    id: "1",
    title: "Job Description",
    description: "Generate a professional job description for any role",
    prompt: "Create a detailed job description for a [Position] including responsibilities, requirements, and benefits."
  },
  {
    id: "2",
    title: "Interview Questions",
    description: "Generate targeted questions for interviews",
    prompt: "Generate a list of 8 interview questions for a [Position] role that assess both technical skills and cultural fit."
  },
  {
    id: "3",
    title: "Candidate Assessment",
    description: "Analyze candidate strengths and fit",
    prompt: "Analyze this candidate profile: [Resume summary] and determine their fit for [Position]."
  },
  {
    id: "4",
    title: "Email Templates",
    description: "Create communication templates for candidates",
    prompt: "Write a professional email to inform a candidate that they [email purpose: have been selected for an interview/have been rejected/etc.]."
  }
];

const initialMessages: Message[] = [
  {
    id: "welcome",
    role: "assistant",
    content: "Hello! I'm your AI recruiting assistant. I can help you draft job descriptions, create interview questions, assess candidates, and more. How can I assist your hiring process today?",
    timestamp: new Date().toLocaleTimeString()
  }
];

const AIAssistantPage = () => {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [inputValue, setInputValue] = useState("");
  const [copying, setCopying] = useState<Record<string, boolean>>({});

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;
    
    const userMessage: Message = {
      id: `user-${Date.now()}`,
      role: "user",
      content: inputValue,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setMessages([...messages, userMessage]);
    setInputValue("");
    
    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: `assistant-${Date.now()}`,
        role: "assistant",
        content: "This is a placeholder response. In a real implementation, this would be generated by the AI based on your input. The response would be tailored to your recruiting needs, whether that's creating job descriptions, interview questions, or candidate assessments.",
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 1000);
  };

  const handleTemplateClick = (prompt: string) => {
    setInputValue(prompt);
  };

  const copyToClipboard = (text: string, id: string) => {
    navigator.clipboard.writeText(text);
    setCopying({ ...copying, [id]: true });
    setTimeout(() => {
      setCopying({ ...copying, [id]: false });
    }, 2000);
  };
  
  return (
    <Layout title="AI Assistant">
      <div className="flex flex-col lg:flex-row gap-6 h-[calc(100vh-9rem)]">
        <div className="lg:w-2/3 flex flex-col h-full">
          <Card className="flex-1 flex flex-col">
            <CardHeader>
              <CardTitle>Recruiting Assistant</CardTitle>
              <CardDescription>
                AI-powered assistant for recruiting tasks
              </CardDescription>
            </CardHeader>
            <CardContent className="flex-1 flex flex-col">
              <div className="flex-1 overflow-y-auto space-y-4 mb-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={cn(
                      "flex gap-3 p-4 rounded-lg",
                      message.role === "assistant" ? "bg-muted" : "bg-ats-50"
                    )}
                  >
                    <Avatar className={cn(
                      "h-8 w-8",
                      message.role === "assistant" ? "bg-ats-600" : "bg-gray-300"
                    )}>
                      <AvatarFallback className={cn(
                        message.role === "assistant" ? "text-white" : "text-gray-700"
                      )}>
                        {message.role === "assistant" ? "AI" : <User className="h-4 w-4" />}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <span className="font-medium">
                          {message.role === "assistant" ? "AI Assistant" : "You"}
                        </span>
                        <div className="flex items-center space-x-2">
                          <span className="text-xs text-muted-foreground">
                            {message.timestamp}
                          </span>
                          {message.role === "assistant" && (
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6"
                              onClick={() => copyToClipboard(message.content, message.id)}
                            >
                              {copying[message.id] ? (
                                <Check className="h-3 w-3" />
                              ) : (
                                <Copy className="h-3 w-3" />
                              )}
                            </Button>
                          )}
                        </div>
                      </div>
                      <p className="text-sm mt-1 whitespace-pre-wrap">{message.content}</p>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Textarea
                  placeholder="Type your message here..."
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  className="flex-1"
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
                <Button onClick={handleSendMessage} className="bg-ats-600 hover:bg-ats-700">
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div className="lg:w-1/3 h-full">
          <Tabs defaultValue="templates" className="h-full">
            <TabsList className="grid grid-cols-2 w-full">
              <TabsTrigger value="templates">Templates</TabsTrigger>
              <TabsTrigger value="history">History</TabsTrigger>
            </TabsList>
            <TabsContent value="templates" className="h-[calc(100%-40px)]">
              <Card className="h-full">
                <CardHeader>
                  <CardTitle>Quick Templates</CardTitle>
                  <CardDescription>
                    Common recruiting AI prompts
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {templates.map((template) => (
                    <Card key={template.id} className="cursor-pointer hover:bg-muted/50 transition-colors" onClick={() => handleTemplateClick(template.prompt)}>
                      <CardHeader className="py-3">
                        <CardTitle className="text-base">{template.title}</CardTitle>
                        <CardDescription className="text-xs">{template.description}</CardDescription>
                      </CardHeader>
                    </Card>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="history" className="h-[calc(100%-40px)]">
              <Card className="h-full">
                <CardHeader>
                  <CardTitle>Conversation History</CardTitle>
                  <CardDescription>
                    Your recent AI conversations
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">
                    Your conversation history will appear here. You can revisit past prompts and responses.
                  </p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </Layout>
  );
};

export default AIAssistantPage;
